name: Run Tests and Deploy

on:
  deployment:
    branches:
    # - master # TODO: Enable when merging into master.
      - develop
  pull_request:
    branches:
      - master
  push:
    branches:
    # - master # TODO: Enable when merging into master.
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # ------- Calculated Values
    - name: Calculated Variables
      id: calculated # access this with steps.calculated.outputs.[name]
      run: |
        echo ::set-output name=app_env::$(( [ '${{ github.event_name }}' == 'deployment' ] && [ '${{ github.event.deployment.environment }}' ] && echo '${{ github.event.deployment.environment }}' ) || ( [ '${{ github.ref }}' == 'refs/heads/master' ] && echo 'production' || echo 'staging' ))
        echo ::set-output name=should_deploy::$([ '${{ github.event_name }}' != 'pull_request' ] && ( [ '${{ github.ref }}' == 'refs/heads/master' ] || [ '${{ github.ref }}' == 'refs/heads/develop' ] ) && echo 'true' || echo 'false')
        echo ::set-output name=bugsnag_branch::$(echo '${{ github.ref }}' | sed 's/^refs\/heads\/\(.*\)$/\1/')
    - name: DEBUG Calculated Logic
      # app_env = production|staging
      # should_deploy = true|false # deploys if event != pull_request on develop and master branches
      # bugsnag_branch = master|develop or refs/pulls/123/merge (something unintelligble to Bugsnag)
      run: |
        echo app_env=${{ steps.calculated.outputs.app_env }}
        echo should_deploy=${{ steps.calculated.outputs.should_deploy }}
        echo bugsnag_branch=${{ steps.calculated.outputs.bugsnag_branch }}


    # -------- Github Checkout
    - uses: actions/checkout@master


    # -------- Ruby & Dependencies
    - name: Install Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.4.x'
    - name: Install Ruby Dependencies
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3


    # -------- JS & Dependencies
    - name: Install Node
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: Install Javascript Dependencies
      run: yarn install --frozen-lockfile --non-interactive


    # -------- Build Static Files
    - name: Download Data from Contentful
      run: bundle exec middleman contentful
      env:
        APP_ENV: ${{ steps.calculated.outputs.app_env }}
        CONTENTFUL_MASTER_TOKEN: ${{ secrets.CONTENTFUL_MASTER_TOKEN }}
        CONTENTFUL_PREVIEW_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_TOKEN }}
    - name: Build Static HTML
      run: bundle exec middleman build --verbose
      env:
        APP_ENV: ${{ steps.calculated.outputs.app_env }}


    # -------- Run Tests
    - name: Run Javascript Tests
      run: yarn run jest --runInBand
    - name: Run Ruby Tests
      run: bundle exec rspec spec -p --format d


    # -------- Deploy to S3 ++ Notify Bugsnag and Github Deployment of Status
    - name: Update deployment status to pending
      # NOTE: Only for deployment events, not commits/etc (which don't have an external deployment context)
      uses: 'deliverybot/deployment-status@master'
      if: github.event_name == 'deployment' && success() && steps.calculated.outputs.should_deploy == 'true'
      with:
        state: 'pending'
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Deploy to S3
      if: success() && steps.calculated.outputs.should_deploy == 'true'
      run: bundle exec middleman s3_sync
      env:
        APP_ENV: ${{ steps.calculated.outputs.app_env }}
        AWS_DEPLOY_ACCESS_ID: ${{ secrets.AWS_DEPLOY_ACCESS_ID }}
        AWS_DEPLOY_SECRET_KEY: ${{ secrets.AWS_DEPLOY_SECRET_KEY }}
    - name: Notify Bugsnag of Released Code
      if: success() && steps.calculated.outputs.should_deploy == 'true'
      uses: wei/curl@v1
      with:
        args: https://notify.bugsnag.com/deploy -d "apiKey=${{ secrets.BUGSNAG_API_KEY }}&releaseStage=${{ steps.calculated.outputs.app_env }}&repository=${{ github.repository }}&branch=${{ steps.calculated.outputs.bugsnag_branch }}&revision=${{ github.sha }}"
    - name: Update deployment status to success
      # NOTE: Only for deployment events, not commits/etc (which don't have an external deployment context)
      if:  github.event_name == 'deployment' && success() && steps.calculated.outputs.should_deploy == 'true'
      uses: 'deliverybot/deployment-status@master'
      with:
        state: 'success'
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Update deployment status to failure
      # NOTE: Only for deployment events, not commits/etc (which don't have an external deployment context)
      if:  github.event_name == 'deployment' && failure() && steps.calculated.outputs.should_deploy == 'true'
      uses: 'deliverybot/deployment-status@master'
      with:
        state: 'failure'
        token: ${{ secrets.GITHUB_TOKEN }}


    # -------- Slack Notifications (different for test vs. deploy).
    - name: Send Deploy Notification
      uses: homoluctus/slatify@master
      if: steps.calculated.outputs.should_deploy == 'true' && always()
      with:
        type: ${{ job.status }}
        job_name: "[help-${{ steps.calculated.outputs.app_env }}] Deploy"
        mention: 'here'
        mention_if: 'failure'
        channel: '#static_site_builds'
        icon_emoji: ':rocket:'
        url: ${{ secrets.SLACK_WEBHOOK_URL }}
    - name: Send Test Failed Notification
      uses: homoluctus/slatify@master
      if: steps.calculated.outputs.should_deploy == 'false' && failure()
      with:
        type: ${{ job.status }}
        job_name: "[help-${{ github.ref }}] Tests"
        channel: '#static_site_builds'
        icon_emoji: ':goose:'
        url: ${{ secrets.SLACK_WEBHOOK_URL }}
